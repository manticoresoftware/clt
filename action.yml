name: 'Run CLT test'
description: 'This action runs a CLT test'
inputs:
  image:
    description: |-
      Docker image on that we will use to run CLT tests
    required: true
    type: string
  init_code:
    description: |-
      Code that is to be executed on init stage before running tests
    required: false
    type: string
    default: ''
  run_args:
    description: |-
      Run args that we will pass to each test we run
    required: false
    type: string
    default: ''
  test_prefix:
    description: |-
      Filter tests by using this prefix in tests folder.
      You can specify multiple prefixes each on one line for groupping.
    required: false
    type: string
    default: 'tests/'
  timeout:
    description: |-
      Allowed timeout in minutes for tests
    required: false
    type: number
    default: 5
  artifact:
    description: |-
      Artifact to download in case you want to use local built docker image to run.
    required: false
    type: string
  repository:
    description: |-
      Repository to checkout.
    required: false
    type: string
  ref:
    description: |-
      The branch name or ref to the original repo we test that we will checkout.
      Optional and by default we use default branch of it.
    required: false
    type: string
    default: ''
  comment_mode:
    description: |-
      If we are in a pull request, we publish summary results of tests to it as comments.
      By default, it uses the 'always' mode that publishes a comment on any results.
      You can set it to 'failures' to create a comment in the pull request only when an error occurred.
    required: false
    type: string
    default: 'always'

runs:
  using: "composite"
  steps:
    - name: Checkout the calling repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - name: Checkout CLT
      uses: actions/checkout@v4
      # TODO: remove the env section once https://github.com/actions/runner/issues/2525 is solved. Using 'env' is just a workaround.
      env:
        GH_ACTION_REPOSITORY: ${{ github.action_repository }}
        GH_ACTION_REF: ${{ github.action_ref }}
      with:
        repository: '${{ env.GH_ACTION_REPOSITORY }}'
        ref: '${{ env.GH_ACTION_REF }}'
        path: 'clt'

    - name: Download artifact
      if:  ${{ inputs.artifact }}
      uses: manticoresoftware/download_artifact_with_retries@main
      with:
        name: ${{ inputs.artifact }}
        path: .

    - name: Initialize the testing Env
      if: ${{ inputs.init_code }}
      run: |
        ${{ inputs.init_code }}
      shell: bash

    - name: Run all tests
      env:
        GITHUB_TOKEN: ${{ github.token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        set +e
        should_exit=0
        test_success=0
        test_failed=0
        start_time=$(date +%s)
        declare -A failed_tests
        if [ -f "${{ inputs.artifact }}" ]; then
          cat "${{ inputs.artifact }}" | docker import - "${{ inputs.image }}"
        fi
        while read -r prefix; do
          for test in ${prefix}*.rec; do
            echo "Running test: $test with command: RUN_ARGS=\"${{ inputs.run_args }}\" clt/clt test -t $test ${{ inputs.image }}"
            echo "Run locally: clt test -d -t $test ${{ inputs.image }}"
            RUN_ARGS="${{ inputs.run_args }}" clt/clt test -t $test ${{ inputs.image }}
            exit_code=$?
            rep_file=$(echo $test | cut -d. -f1).rep
            cat $rep_file
            if [ $exit_code -ne 0 ]; then
              echo -n $'\n'$'\n'$'\n'
              echo "🚨 Test failed with exit code: $exit_code"
              echo "CLT-CMP diff output:"
              cmp_file=$(echo $test | cut -d. -f1).cmp
              output="$(cat "$cmp_file")"
              failed_tests[$test]="$output"
              echo "$output"
              should_exit=1
              ((test_failed++))
            else
              ((test_success++))
            fi
            echo "–––"
          done
        done <<< "$(sed 's/^[[:space:]]*//;s/[[:space:]]*$//' <<< "${{ inputs.test_prefix }}")"
        end_time=$(date +%s)
        test_duration=$((end_time - start_time))

        # Write summary
        if [ "$test_failed" -gt "0" ]; then
          test_emoji="❌"
        else
           # We stop processing if all tests passed
          exit 0
        fi


        job_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        commit_url="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
        commit_sha="$(echo "${{ github.sha }}" | cut -c1-7 )"
        echo "## ${{ github.job }}" >> $GITHUB_STEP_SUMMARY
        echo "${test_emoji} CLT tests in \`${{ inputs.test_prefix }}\`" >> $GITHUB_STEP_SUMMARY
        echo "✅ OK: $test_success" >> $GITHUB_STEP_SUMMARY
        echo "❌ Failed: $test_failed" >> $GITHUB_STEP_SUMMARY
        echo "⏳ Duration: ${test_duration}s" >> $GITHUB_STEP_SUMMARY
        echo "👉 [Check Action Results]($job_url) for commit [$commit_sha]($commit_url)" >> $GITHUB_STEP_SUMMARY

        if [ ${#failed_tests[@]} -ne 0 ]; then
          echo "Failed tests:" >> $GITHUB_STEP_SUMMARY
          for key in "${!failed_tests[@]}"; do
            value="${failed_tests[$key]}"
            echo '<details>' >> $GITHUB_STEP_SUMMARY
            echo "<summary>$key</summary>" >> $GITHUB_STEP_SUMMARY
            echo >> $GITHUB_STEP_SUMMARY
            echo '```diff' >> $GITHUB_STEP_SUMMARY
            echo "$value" | sed 's/\x1b\[[0-9;]*m//g' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo >> $GITHUB_STEP_SUMMARY
            echo '</details>' >> $GITHUB_STEP_SUMMARY
          done
        fi

        should_comment="$should_exit"
        if [[ ${{ github.event_name }} == 'pull_request' ]]; then
          if [ "${{ inputs.comment_mode }}" -eq 'always' ]; then
            should_comment=1
          fi
        else
          should_comment=0
        fi

        if [[ "$should_comment" == "1" ]]; then
          gh pr comment $PR_NUMBER --body "$(cat $GITHUB_STEP_SUMMARY)" -R ${{ github.repository }}
        fi

        # If we have some test failed, we exit
        if [[ "$should_exit" == "1" ]]; then
          exit 1
        fi
      shell: bash

